#compdef phpunit

_arguments -s -w \
   '(-)'{-h,--help}'[Prints this usage information]' \
   '(-c|--configuration)'{-c,--configuration}'=[Read configuration from XML file]:configuration:_files -/' \
   '(-v|--verbose)'{-v,--verbose}'[Output more verbose information]' \
   '--atleast-version=[Checks that version is greater than min and exits]:integer' \
   '--bootstrap=[A "bootstrap" PHP file that is run before the tests]:bootstrap:_files -/' \
   '--cache-result-file[Specify result cache path and filename]:cache result file:_files -/' \
   '--cache-result[Write run result to cache to enable ordering tests defects-first]' \
   '--colors=[Use colors in output ("never", "auto" or "always")]:"always", "auto" or "never":("never" "auto" "always")' \
   '--columns=[Number of columns to use for progress output]:integer or "max":("max")' \
   '--coverage-clover=[Generate code coverage report in Clover XML format]:coverage clover:_files -/' \
   '--coverage-crap4j=[Generate code coverage report in Crap4J XML format]:coverage crap4j:_files -/' \
   '--coverage-html=[Generate code coverage report in HTML format]:coverage html:_files -/' \
   '--coverage-php=[Serialize PHP_CodeCoverage object to file]:coverage php:_files -/' \
   '--coverage-text=[Generate code coverage report in text format. Default to writing to the standard output]:coverage text:_files -/' \
   '--coverage-xml=[Generate code coverage report in PHPUnit XML format]:coverage xml:_files -/' \
   '--debug[Display debugging information during test execution]' \
   '--disable-coverage-ignore[Disable annotations for ignoring code coverage]' \
   '--disallow-resource-usage[Be strict about resource usage during small tests]' \
   '--disallow-test-output[Be strict about output during tests]' \
   '--disallow-todo-tests[Does not execute tests which have the @todo annotation in its docblock]' \
   '--dont-report-useless-tests[Do not report tests that do not test anything]' \
   '--enforce-time-limit[Enforce time limit based on test size]' \
   '--exclude-group=[Exclude tests from the specified group(s)]' \
   '--fail-on-risky[Treat risky tests as failures]' \
   '--fail-on-warning[Treat tests with warnings as failures]' \
   '--filter=[Filter which tests to run]' \
   '--generate-configuration[Generate configuration file with suggested settings]' \
   '--group=[Only runs tests from the specified group(s)]' \
   '--globals-backup[Backup and restore $GLOBALS for each test]' \
   '--include-path=[Prepend PHP include_path with given path(s)]:include path:_files -/' \
   '--list-groups[List available test groups]' \
   '--list-suites[List available test suites]' \
   '--list-tests-xml=[List available tests in XML format]:list xml tests:_files -/' \
   '--list-tests[List available tests]' \
   '--loader=[TestSuiteLoader implementation to use]' \
   '--log-junit=[Log test execution in JUnit XML format to file]:log junit:_files -/' \
   '--log-teamcity=[Log test execution in TeamCity format to file]:log teamcity:_files -/' \
   '--no-configuration[Ignore default configuration file (phpunit.xml)]' \
   '--no-coverage[Ignore code coverage configuration]' \
   '--no-extensions[Do not load PHPUnit extensions]' \
   '--no-globals-backup[Do not backup and restore $GLOBALS]' \
   '--no-logging[Ignore logging configuration]' \
   '--order-by=[Run tests in order default|reverse|random|defects|depends]:order by:("default" "reverse" "random" "defects" "depends")' \
   '--printer=[Specifies the result printer to use]' \
   '--process-isolation[Run each test in a separate PHP process]' \
   '--random-order-seed=[Use a specific random seed <N> for random order]:random seed' \
   '--repeat=[Repeatedly runs the test(s) the specified number of times]:number of times' \
   '--resolve-dependencies[Resolve dependencies between tests]' \
   '--reverse-list[Print defects in reverse order]' \
   '--static-backup[Backup and restore static attributes of user-defined classes]' \
   '--stderr[Write to STDERR instead of STDOUT]' \
   '--stop-on-defect[Stop execution upon first not-passed test]' \
   '--stop-on-error[Stop execution upon first error]' \
   '--stop-on-failure[Stop execution upon first error or failure]' \
   '--stop-on-incomplete[Stop execution upon first incomplete test]' \
   '--stop-on-risky[Stop execution upon first risky test]' \
   '--stop-on-skipped[Stop execution upon first skipped test]' \
   '--stop-on-warning[Stop execution upon first warning]' \
   '--strict-coverage[Be strict about unintentionally covered code]' \
   '--strict-global-state[Be strict about global state manipulation]' \
   '--teamcity[Report test execution progress in TeamCity format]' \
   '--test-suffix=[Only search for test in files with specified suffix(es). Default: Test.php,.phpt]' \
   '--testdox-html=[Write agile documentation in HTML format to file]:testdoc html:_files -/' \
   '--testdox-text=[Write agile documentation in Text format to file]:testdoc text:_files -/' \
   '--testdox-xml=[Write agile documentation in XML format to file]:testdoc xml:_files -/' \
   '--testdox-group=[Only include tests from the specified group(s)]' \
   '--testdox-exclude-group=[Exclude tests from the specified group(s)]' \
   '--testdox[Report test execution progress in TestDox format]' \
   '--testsuite=[Only runs the test suite whose name matches the given pattern]' \
   '--version[Prints the version and exits]' \
   '--whitelist=[Whitelist dir for code coverage analysis]:whitelist dir:_files -/' \
   '-d[Sets a php.ini value]' \
   '*:file:_files -/'
